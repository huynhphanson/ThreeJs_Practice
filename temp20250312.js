function syncThreeToCesium() {
  let threePosition = new THREE.Vector3();
  let threeQuaternion = new THREE.Quaternion();

  // âœ… Láº¥y vá»‹ trÃ­ vÃ  gÃ³c xoay tá»« Three.js
  camera.getWorldPosition(threePosition);
  camera.getWorldQuaternion(threeQuaternion);

  console.log('ðŸ”¹ Three.js Position:', threePosition);
  console.log('ðŸ”¹ Three.js Quaternion:', threeQuaternion);

  // âœ… Chuyá»ƒn vá»‹ trÃ­ sang há»‡ Cesium
  let cesiumPosition = new Cesium.Cartesian3(threePosition.x, threePosition.y, threePosition.z);

  // âœ… Chuyá»ƒn Quaternion sang ma tráº­n xoay
  let m = new THREE.Matrix4();
  m.makeRotationFromQuaternion(threeQuaternion);

  // âœ… Chuyá»ƒn Ä‘á»•i hÆ°á»›ng nhÃ¬n vÃ  hÆ°á»›ng "up"
  let threeDirection = new THREE.Vector3(0, 0, -1).applyMatrix4(m).normalize();
  let threeUp = new THREE.Vector3(0, 1, 0).applyMatrix4(m).normalize();

  let cesiumDirection = new Cesium.Cartesian3(threeDirection.x, threeDirection.y, threeDirection.z);
  let cesiumUp = new Cesium.Cartesian3(threeUp.x, threeUp.y, threeUp.z);

  Cesium.Cartesian3.normalize(cesiumDirection, cesiumDirection);
  Cesium.Cartesian3.normalize(cesiumUp, cesiumUp);

  // âœ… Cáº­p nháº­t camera Cesium
  try {
      cesiumViewer.camera.setView({
          destination: cesiumPosition,
          orientation: {
              direction: cesiumDirection,
              up: cesiumUp
          }
      });
  } catch (error) {
      console.error("ðŸš¨ Lá»—i setView():", error);
  }
}